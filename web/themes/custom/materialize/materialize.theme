<?php

use Drupal\node\Entity\Node;
use Drupal\views\Views;
use Drupal\taxonomy\Entity\Term;
use Drupal\media\Entity\Media;

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function materialize_form_system_theme_settings_alter(&$form, Drupal\Core\Form\FormStateInterface $form_state) {

  $form['materialize_settings'] = array(
    '#type' => 'details',
    '#open' => TRUE,
    '#title' => t('Materialize Settings'),
    '#description' => t('Change your theme color settings here.'),
  );

  // Color Settings.
  $form['materialize_settings']['color'] = array(
    '#type' => 'details',
    '#title' => t('Materialize Color Settings'),
  );
  // Header Color Settings.
  $form['materialize_settings']['color']['header_bg_color'] = array(
    '#type' => 'color',
    '#title' => t('Header Background Color'),
    '#default_value' => theme_get_setting('header_bg_color', 'materialize'),
  );
  $form['materialize_settings']['color']['header_text_color'] = array(
    '#type' => 'color',
    '#title' => t('Header Text Color'),
    '#default_value' => theme_get_setting('header_text_color', 'materialize'),
  );
  // Body Color Settings.
  $form['materialize_settings']['color']['body_bg_color'] = array(
    '#type' => 'color',
    '#title' => t('Body Background Color'),
    '#default_value' => theme_get_setting('body_bg_color', 'materialize'),
  );
  // Footer Color Settings.
  $form['materialize_settings']['color']['footer_bg_color'] = array(
    '#type' => 'color',
    '#title' => t('Footer Background Color'),
    '#default_value' => theme_get_setting('footer_bg_color', 'materialize'),
  );
  $form['materialize_settings']['color']['footer_text_color'] = array(
    '#type' => 'color',
    '#title' => t('Footer Text Color'),
    '#default_value' => theme_get_setting('footer_text_color', 'materialize'),
  );
  $form['materialize_settings']['footer']['footer_copyright'] = array(
    '#type' => 'textfield',
    '#title' => t('Footer Copyright Text'),
    '#default_value' => theme_get_setting('footer_copyright', 'materialize'),
    '#description' => t('Example: <em>&copy; ' . date('Y') . ' [Footer Copyright Text]</em>'),
  );

}

/**
 * Implements hook_preprocess_html() to add variables to html.html.twig template.
 */
function materialize_preprocess_html(&$variables) {
  $variables['body_bg'] = theme_get_setting('body_bg_color','materialize');
  $variables['page']['#attached']['library'][] = 'materialize/parallax-init';
  $variables['page']['#attached']['library'][] = 'materialize/font-awesome';
}

/**
 * Implements hook_preprocess_page() to add variables to page.html.twig template.
 */
function materialize_preprocess_page(&$variables) {
  $variables['header_bg'] = theme_get_setting('header_bg_color','materialize');
  $variables['header_txt'] = theme_get_setting('header_text_color','materialize');
  $variables['footer_bg'] = theme_get_setting('footer_bg_color','materialize');
  $variables['footer_txt'] = theme_get_setting('footer_text_color','materialize');
  $variables['copyright'] = theme_get_setting('footer_copyright', 'materialize');
  if (isset($_GET['f'])) {
    foreach ($_GET['f'] as $filter) {
      $filter_parts = explode(':', $filter);
      $variables['query'][] = $filter_parts[0];
      $filter = array_shift($filter_parts);
      if (count($filter_parts) > 2) {
        $variables['filters'][$filter] = [
          'var' => implode(':', $filter_parts),
          'name' => str_replace('_', ' ', $filter)
        ];
      }
      else {
        $variables['filters'][$filter] = [
          'var' => $filter_parts[0],
          'name' => str_replace('_', ' ', $filter)
        ];
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for node templates.
 */
function materialize_theme_suggestions_views_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'node__' . 'first';
  $suggestions[] = 'node__' . 'second';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function materialize_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__'.$content_type;
  }
}

/**
 * Implements hook_preprocess_node() to add variables to page.html.twig template.
 */
function materialize_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->getType() == 'video') {
    $game_node = $node->get('field_game')->referencedEntities();
    $game = array_pop($game_node);
    if ($game->get('field_home_away')->value == 1) {
      $variables['stadium_img'] = 'foxboro.jpg';
    }
    else {
      $tid = $game->get('field_opponent')->target_id;
      $team = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid)->label();
      $variables['stadium_img'] = strtolower($team) . '.jpg';
    }
  }
}

function get_team($tid) {

}


function get_terms($taxonomy) {
  $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($taxonomy);
  $term_data = [];
  foreach ($terms as $term) {
    $term_data[$term->tid] = $term->name;
  }
  return $term_data;
}

/**
 * @return array of teams and their pre-2002 divisions.
 */
function old_divisions() {
  return [
    'arizona-cardinals' => ['conference' => 'NFC', 'division' => 'East'],
    'indianapolis-colts' => ['conference' => 'AFC', 'division' => 'East'],
    'seattle-seahawks' => ['conference' => 'AFC', 'division' => 'West'],
    'new-orleans-saints'=> ['conference' => 'NFC', 'division' => 'West'],
    'tennessee-titans'=> ['conference' => 'AFC', 'division' => 'Central'],
    'baltimore-ravens'=> ['conference' => 'AFC', 'division' => 'Central'],
    'pittsburgh-steelers'=> ['conference' => 'AFC', 'division' => 'Central'],
    'jacksonville-jaguars'=> ['conference' => 'AFC', 'division' => 'Central'],
    'cincinnati-bengals'=> ['conference' => 'AFC', 'division' => 'Central'],
    'cleveland-browns'=> ['conference' => 'AFC', 'division' => 'Central'],
    'minnesota-vikings'=> ['conference' => 'NFC', 'division' => 'Central'],
    'tampa-bay-buccaneers'=> ['conference' => 'NFC', 'division' => 'Central'],
    'green-bay-packers'=> ['conference' => 'NFC', 'division' => 'Central'],
    'detroit-lions'=> ['conference' => 'NFC', 'division' => 'Central'],
    'chicago-bears'=> ['conference' => 'NFC', 'division' => 'Central'],
  ];
}

function passer_rating($att, $comp, $yds, $td, $int) {
  $a = (($comp/$att) - 0.3) * 5;
  $b = (($yds/$att) - 3) * .25;
  $c = ($td/$att) * 20;
  $d = 2.375 - (($int/$att) * 25);

  $passer_rating = (($a + $b + $c + $d) / 6) * 100;

  return $passer_rating;
}
